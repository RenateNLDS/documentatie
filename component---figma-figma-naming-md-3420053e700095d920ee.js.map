{"version":3,"sources":["webpack:///../figma/figma-naming.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","alt","src","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,uMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,mBADR,mBAGA,2OACA,qBAAG,mBAAKC,IAAI,mCAAmCC,IAAI,yGACnD,oKAAmJ,0BAAYC,WAAW,KAAvB,yBAAnJ,mDACA,gLACA,kBACE,GAAM,sBADR,sBAGA,yOACA,+LACA,mHACA,qBAAG,mBAAKF,IAAI,mCAAmCC,IAAI,yGACnD,gGACA,qBAAG,mBAAKD,IAAI,qDAAqDC,IAAI,yGACrE,kBACE,GAAM,YADR,YAGA,sGACA,kIACA,qBAAG,mBAAKD,IAAI,gCAAgCC,IAAI,yGAChD,0FACA,kBACE,GAAM,4DADR,4DAGA,kEAAiD,0BAAYC,WAAW,KAAvB,KAAjD,6NACA,4KACA,qBAAG,mBAAKF,IAAI,uFAAuFC,IAAI,yGACvG,kBACE,GAAM,UADR,UAGA,qJAAoI,0BAAYC,WAAW,KAAvB,UAApI,qEACA,yFAAwE,0BAAYA,WAAW,KAAvB,OAAxE,qKACA,qBAAG,mBAAKF,IAAI,gCAAgCC,IAAI,yGAChD,qBAAG,mBAAKD,IAAI,8BAA8BC,IAAI,+G,qMAKlDL,EAAWO,gBAAiB","file":"component---figma-figma-naming-md-3420053e700095d920ee.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/documentatie/documentatie/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"naming-in-figma\"\n    }}>{`Naming in Figma`}</h1>\n    <p>{`A good approach in any design file is to explicitly name objects directly after their creation. This helps adding meaning to design objects and eases handoff of a design file to another designer or a developer.`}</p>\n    <p><img alt=\"Unnamed nested frames and groups\" src=\"https://user-images.githubusercontent.com/248921/140958292-85ccee96-2add-4613-9daf-755b11bd433b.png\" /></p>\n    <p>{`For instance, if you create a rectangle meant as background and border container for a text input it is good practice to name the rectangle `}<inlineCode parentName=\"p\">{`text-input-background`}</inlineCode>{` or similar right after creating the rectangle.`}</p>\n    <p>{`Where possible, components, layers, frames, and design tokens borrow (semantic) names from HTML and SVG tags, CSS properties, ARIA roles or BEM naming.`}</p>\n    <h2 {...{\n      \"id\": \"component-variants\"\n    }}>{`Component variants`}</h2>\n    <p>{`For convenience and ‘scanablity’ when working with component variants we suggest using lowercase for boolean values, such as on/off or true/false options and sentence case for interactive and feedback states.`}</p>\n    <p>{`Using the same naming as used in the front-end again eases communication and handoff. For instance for a checkbox’ checked state we use 'checked' instead of 'active'.`}</p>\n    <p>{`In Figma, variant properties can be sorted by dragging and dropping individual properties.`}</p>\n    <p><img alt=\"Component variant panel in Figma\" src=\"https://user-images.githubusercontent.com/248921/140958477-85782e98-ca0f-451a-b85e-1015ca081046.png\" /></p>\n    <p>{`These references also help quickly setting up an interactive prototype.`}</p>\n    <p><img alt=\"Prototype settings in Figma reflect variant naming\" src=\"https://user-images.githubusercontent.com/248921/140958596-9c6db66c-299b-441f-9196-af916dbe9f37.png\" /></p>\n    <h2 {...{\n      \"id\": \"synonyms\"\n    }}>{`Synonyms`}</h2>\n    <p>{`Synonyms in the description field help searching for components in libraries.`}</p>\n    <p>{`In below example searching on either select, dropdown, or menu all return the library’s select component.`}</p>\n    <p><img alt=\"Synonyms for Select component\" src=\"https://user-images.githubusercontent.com/248921/140958774-31867f4e-87c2-45ae-86bc-288f965b99c7.png\" /></p>\n    <p>{`Descriptions can be set on individual component variants as well.`}</p>\n    <h3 {...{\n      \"id\": \"avoid-local-components-from-being-published-to-a-library\"\n    }}>{`Avoid local components from being published to a library`}</h3>\n    <p>{`Prefixing a component with an underscore (`}<inlineCode parentName=\"p\">{`_`}</inlineCode>{`) prevents it from being published to a shared library. This is especially useful to avoid atomic elements, in use by  components but with no use as a reusable standalone element, from being added to a shared library.`}</p>\n    <p>{`In below example searching on ‘checkbox’ returns all components with checkbox in their name. However searching on ‘placeholder’ returns no results.`}</p>\n    <p><img alt=\"Components which will be published, and components with a prefix not being published\" src=\"https://user-images.githubusercontent.com/248921/140958964-90e3ddf8-5bd2-4f0b-bcdc-3b32be0958fe.png\" /></p>\n    <h2 {...{\n      \"id\": \"images\"\n    }}>{`Images`}</h2>\n    <p>{`Design files are a perfect place to define the intention of images. If an image is decorative, and as such would get a blank `}<inlineCode parentName=\"p\">{`alt=\"\"`}</inlineCode>{` alternative text attribute this can be added to its description.`}</p>\n    <p>{`Likewise, if an image is informative to the user, an appropriate `}<inlineCode parentName=\"p\">{`alt`}</inlineCode>{` text can already be added as image name. Using the layer to add this image description results in this text being available in Figma’s Layer and Inspect panels.`}</p>\n    <p><img alt=\"Image with undescriptive name\" src=\"https://user-images.githubusercontent.com/248921/140959070-29703f9f-6b66-4fe8-947d-52905dc84458.png\" /></p>\n    <p><img alt=\"Image with descriptive name\" src=\"https://user-images.githubusercontent.com/248921/140959094-c7b3b87e-f49a-4f23-8893-7e93080f94a9.png\" /></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}